////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Seg_map.vf
// /___/   /\     Timestamp : 12/23/2016 13:11:14
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath E:/HRD_1/ipcore_dir -intstyle ise -family kintex7 -verilog E:/HRD_1/Seg_map.vf -w E:/HRD_1/Seg_map.sch
//Design Name: Seg_map
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module MUX4T1_MUSER_Seg_map(I0, 
                            I1, 
                            I2, 
                            I3, 
                            S, 
                            O);

    input I0;
    input I1;
    input I2;
    input I3;
    input [1:0] S;
   output O;
   
   wire XLXN_1;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   
   OR4  XLXI_1 (.I0(XLXN_5), 
               .I1(XLXN_4), 
               .I2(XLXN_3), 
               .I3(XLXN_1), 
               .O(O));
   AND2  XLXI_2 (.I0(I0), 
                .I1(XLXN_6), 
                .O(XLXN_1));
   AND2  XLXI_3 (.I0(I1), 
                .I1(XLXN_7), 
                .O(XLXN_3));
   AND2  XLXI_4 (.I0(I2), 
                .I1(XLXN_8), 
                .O(XLXN_4));
   AND2  XLXI_5 (.I0(I3), 
                .I1(XLXN_9), 
                .O(XLXN_5));
   AND2  XLXI_6 (.I0(XLXN_12), 
                .I1(XLXN_10), 
                .O(XLXN_6));
   AND2  XLXI_7 (.I0(S[0]), 
                .I1(XLXN_10), 
                .O(XLXN_7));
   AND2  XLXI_8 (.I0(S[1]), 
                .I1(XLXN_12), 
                .O(XLXN_8));
   AND2  XLXI_9 (.I0(S[1]), 
                .I1(S[0]), 
                .O(XLXN_9));
   INV  XLXI_10 (.I(S[1]), 
                .O(XLXN_10));
   INV  XLXI_11 (.I(S[0]), 
                .O(XLXN_12));
endmodule
`timescale 1ns / 1ps

module Seg_map(Hexs, 
               Scan, 
               Seg_map);

    input [31:0] Hexs;
    input [2:0] Scan;
   output [7:0] Seg_map;
   
   
   MUX4T1_MUSER_Seg_map  XLXI_7 (.I0(Hexs[0]), 
                                .I1(Hexs[1]), 
                                .I2(Hexs[2]), 
                                .I3(Hexs[3]), 
                                .S(Scan[1:0]), 
                                .O(Seg_map[0]));
   MUX4T1_MUSER_Seg_map  XLXI_8 (.I0(Hexs[4]), 
                                .I1(Hexs[6]), 
                                .I2(Hexs[8]), 
                                .I3(Hexs[10]), 
                                .S(Scan[1:0]), 
                                .O(Seg_map[1]));
   MUX4T1_MUSER_Seg_map  XLXI_9 (.I0(Hexs[16]), 
                                .I1(Hexs[18]), 
                                .I2(Hexs[20]), 
                                .I3(Hexs[22]), 
                                .S(Scan[1:0]), 
                                .O(Seg_map[2]));
   MUX4T1_MUSER_Seg_map  XLXI_10 (.I0(Hexs[25]), 
                                 .I1(Hexs[27]), 
                                 .I2(Hexs[29]), 
                                 .I3(Hexs[31]), 
                                 .S(Scan[1:0]), 
                                 .O(Seg_map[3]));
   MUX4T1_MUSER_Seg_map  XLXI_11 (.I0(Hexs[17]), 
                                 .I1(Hexs[19]), 
                                 .I2(Hexs[21]), 
                                 .I3(Hexs[23]), 
                                 .S(Scan[1:0]), 
                                 .O(Seg_map[4]));
   MUX4T1_MUSER_Seg_map  XLXI_12 (.I0(Hexs[5]), 
                                 .I1(Hexs[7]), 
                                 .I2(Hexs[9]), 
                                 .I3(Hexs[11]), 
                                 .S(Scan[1:0]), 
                                 .O(Seg_map[5]));
   MUX4T1_MUSER_Seg_map  XLXI_13 (.I0(Hexs[12]), 
                                 .I1(Hexs[13]), 
                                 .I2(Hexs[14]), 
                                 .I3(Hexs[15]), 
                                 .S(Scan[1:0]), 
                                 .O(Seg_map[6]));
   MUX4T1_MUSER_Seg_map  XLXI_14 (.I0(Hexs[24]), 
                                 .I1(Hexs[26]), 
                                 .I2(Hexs[28]), 
                                 .I3(Hexs[30]), 
                                 .S(Scan[1:0]), 
                                 .O(Seg_map[7]));
endmodule
